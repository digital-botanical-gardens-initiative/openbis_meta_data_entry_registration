#!/usr/bin/env python
# coding: utf-8

import pandas as pd
from pybis import Openbis
import getpass

def get_connection():
    """
    Establish connection to the openBIS database
    """
    o = Openbis('https://openbis-dbgi.labnotebook.ch/openbis/webapp/eln-lims/?', verify_certificates=False)
    password = getpass.getpass()
     o.login('my.email_AT_uni.ch-XXXXX', password, save_token=True) 
    return o


def get_connection_token():
    """
    Establish connection to the openBIS database
    """
    o = Openbis('https://openbis-dbgi.labnotebook.ch/openbis/webapp/eln-lims/?', verify_certificates=False)
    password = getpass.getpass()
    o.set_token('my.email_AT_uni.ch-XXXXX', save_token=True) 
    return o

get_connection_token()

def read_excel():
    """
    Read the Excel file with the object properties to be registered into a dataframe
    """
    df = pd.read_excel('./openbis_object_observation_properties_revised.xlsx')
    return df

def get_property_types(o):
    """
    Get all properties already registered in the openBIS database of the meta data models and stores them into an array
    """
    pt = o.get_property_types()
    pt = pt.df
    prop_types = pt['code'].unique()
    return prop_types

def register_new_properties(df, prop_types, o):
    """
    Loop over the dataframe of the properties to be registered in the openBIS.
    Check for the presence of the property in the openBIS database.
    Register the property if it is not represented in the database.
    """
    for i in range(len(df)):
        code_to_check =  df['Code'][i]
        if code_to_check in prop_types:
            print(code_to_check + " Present")
        else:
            print("Registration of ", code_to_check) 
            pt = o.new_property_type(
                code  = df.loc[i, 'Code'],
                label = df.loc[i, 'Label'],
                description = df.loc[i, 'Description'],
                dataType = df.loc[i, 'Data Type'],
            )
            pt.save()

if __name__ == "__main__":
    o = get_connection()
    df = read_excel()
    prop_types = get_property_types(o)
    register_new_properties(df, prop_types, o)


############################################
### To register a new object OBSERVATION ###
### Can be reused to register other objects (to be adapted) ###
###############################################################
#sample_type = o.new_sample_type(
#    code                = 'OBSERVATION',  # mandatory
#    generatedCodePrefix = 'O',                   # mandatory
#    autoGeneratedCode   = True,
#    subcodeUnique       = False,
#    listable            = True,
#    showContainer       = False,
#    showParents         = True,
#    showParentMetadata  = False)
#sample_type.save()
#print(sample_type)

